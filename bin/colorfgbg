#!/bin/bash
# Can be sourced from bashrc - sets COLORFGBG if missing.
# Or run directly to print COLORFGBG guess.

# Guesses terminal background theme and sets/updates COLORFGBG variable.
function __reset_colorfgbg() {
  if [[ -n "$COLORFGBG" && "$COLORTERM" == rxvt* ]]; then
    return  # rxvt explicitly sets COLORFGBG
  fi

  local dark=""
  if [[ -f ~/.local/dotfiles/black ||
        -f ~/.dotfiles/black ||
        "$TERM" == "linux" ||
        "$TERM" == "screen" ||
        "$TERM" == "screen-256color" ||
        "$TERM" == "screen.linux" ||
        "$TERM" == "cygwin" ||
        "$TERM" == "putty" ||
        -n "$CHROME_REMOTE_DESKTOP_DEFAULT_DESKTOP_SIZES" || # ssh applet
        -n "$GUAKE_TAB_UUID" ||   # guake
        -n "$PYXTERM_DIMENSIONS"  # jupyterlab
       ]]; then
    dark=1
  else
    local prev_stty="$(stty -g)"
    stty raw -echo min 0 time 0

    # https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Operating-System-Commands
    # Query VT100 text background color
    echo -e -n '\033]11;?\033\\'

    # sometimes terminal can be slow to respond
    local response=""
    local i=0
    while ((i < 15)); do
      if [[ "$i" -le 10 ]]; then
        sleep 0.01
      else
        sleep 0.1
      fi
      read -r response
      if [[ "$response" != "" ]]; then
        break
      fi
      i=$((i + 1))
    done
    stty "$prev_stty"

    if [[ "$response" == *rgb:[0-8]* ]]; then
      dark=1
    else
      dark=0
    fi
  fi

  if [[ "$dark" == 1 ]]; then
    export COLORFGBG="15;0"
  elif [[ "$dark" == 0 ]]; then
    export COLORFGBG="0;15"
  fi
}

if [[ "$0" != "${BASH_SOURCE[0]}" ]]; then
  # sourced
  if [[ -z "$COLORFGBG" ]]; then
    __reset_colorfgbg
  fi
else
  __reset_colorfgbg
  echo "$COLORFGBG"
fi
